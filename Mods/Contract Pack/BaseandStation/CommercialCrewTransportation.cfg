// Modified 2023-08-17

CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = CCTSmissionStation
    title = Commercial Crew Mission to @/targetVessel1
    genericTitle = Space Station Commercial Crew Mission
    group = BasesandStations
    description = Launch a Commercial Crew Mission to @/targetVessel1.
    genericDescription = Send a crew to a Space Station, do some work, then bring them back home alive.
    synopsis =  Send a crew to @/targetVessel1.
    completedMessage = Mission Complete! The returned crew members are going for a pint. Care to join?
    
    minExpiry = 1
    maxExpiry = 7
    
    cancellable = true
    declinable = true
    maxSimultaneous = 1
    
    rewardScience = 0.0
    rewardReputation = Random(1, 5.0)
    rewardFunds = 100000 + @/PayloadSpecialistNum * 50000
    failureReputation = Random(1, 5.0)
    failureFunds = Random(1, 10000.0)
    advanceFunds = Random(10000, 20000)
    
    targetBody = @/targetBody1

    DATA
    {
        type = int
        hidden = true
        PayloadSpecialistNum = Random(2, 4)
    }
    DATA
    {
        type = CelestialBody
        requiredValue = true
        targetBody1 = @/targetVessel1.CelestialBody()
        hidden = true
    }
    
    DATA
    {
        type = Vessel
        uniquenessCheck = GROUP_ACTIVE
        requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station).SelectUnique()
        title = Must have a station
    }

    PARAMETER
    {
        name = All
        type = All
        
        PARAMETER
        {
            name = NewVessel
            type = NewVessel
        }
    
        PARAMETER
        {
            name = DockwithStation
            type = Docking
            duration = 180d
            vessel = @/targetVessel1
            title = Dock with @/targetVessel1
            completeInSequence = true
        }

        PARAMETER
        {
            name = HasCrew
            type = HasCrew
            minCrew = @/PayloadSpecialistNum
            trait = PayloadSpecialist
            disableOnStateChange = true
            hideChildren = true
            title = Have at least @/PayloadSpecialistNum.print() PayloadSpecialists on board
        }
    }
    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal
        completeInSequence = true
    }
    REQUIREMENT
    {
        name = StationCheck
        type = Expression
        expression = (@/targetVessel1.IsOrbiting())
        title = The station must be in orbit
    }
    

    DATA
    {
        type = List<Kerbal>
        // Get me some Kerbals to send home!
        targetKerbals = @targetVessel1.Crew()
        hidden = true
    }


    REQUIREMENT
    {
        name = Expression
        type = Expression
        checkOnActiveContract = false
        expression = @BasesandStations:randomRoll >5
        title = The RNG must like you
    }
}