// Modified 2024-04-18

CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = MedicalMission
    title = Medical Mission to @/targetVessel1
    genericTitle = Medical Mission
    group = BasesandStations
    description = Launch a Medical Mission to @/targetVessel1.
    genericDescription =  @/targetKerbal1 is very sick and require urgent medical surgery. Send a crew of medical expert to perform the surgery. Do it fast, do it right.
    synopsis =  Send a medical crew to @/targetVessel1.
    completedMessage = Mission Complete! Another life saved today.
    prestige = Significant
    minExpiry = 1
    maxExpiry = 7
    deadline = 15
    cancellable = true
    declinable = true
    maxSimultaneous = 3
    
    rewardScience = 0.0
    rewardReputation = Random(1, 5.0)
    rewardFunds = 750000
    failureReputation = Random(10, 50)
    failureFunds = Random(1000000, 3000000)
    advanceFunds = Random(50000, 100000)
    
    targetBody = @/targetBody1

    // When set to true, this contract is automatically accepted when
    // offered.  Use it to make a contract like the stock World-Firsts
    // Record contracts.
    // Default = false
    autoAccept = false
    
    DATA
    {
        type = CelestialBody
        requiredValue = true
        targetBody1 = @/targetVessel1.CelestialBody()
        hidden = true
    }
    
    DATA
    {
        type = Vessel
        uniquenessCheck = GROUP_ACTIVE
        requiredValue = true
        targetVessel1 = AllVessels().Where(v => ((v.IsLanded() && v.VesselType()== Base) || (v.VesselType() == Station)) && v.CrewCount()>= 1).Random()
        title = Must have a vessel with a crew.
    }

    DATA
	{
		type = Kerbal
		uniquenessCheck = GROUP_ACTIVE
		targetKerbal1 = @targetVessel1.Crew().Random()
		title = Finding a sick Kerbal.
	}

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup
        vessel = @/targetVessel1
        completeInSequence = true
        
        PARAMETER
        {
            name = HasCrew
            type = HasCrew
            minCrew = 2
            trait = Medical
            disableOnStateChange = true
            hideChildren = true
            title = Have at least 2 medical experts on board
            completeInSequence = true
        }

        PARAMETER
        {
            name = HasCrew
            type = HasCrew
            minCrew = 4
            disableOnStateChange = true
            hideChildren = true
            title = Have another 2 crew members to help
            completeInSequence = true
        }
    }

    PARAMETER
    {
        name = Duration
        type = Duration
        duration = 4d
        preWaitText = Waiting for the Medical Team.
        waitingText = Team arrived at the patient, performing surgery
        completionText = Mission accomplished! 
        completeInSequence = true
    }

    PARAMETER
    {
        name = Timer
        type = Timer

        // The duration the timer is set to. Can specify values in years (y),
        // days (d), hours (h), minutes (m), seconds (s) or any combination of
        // those.
        //
        // Type:      Duration
        // Required:  Yes
        //
        duration = 15d

        // The type of timer (indicates what will trigger the timer to start).
        //
        // Type:      Timer.TimerType
        // Required:  No (defaulted)
        // Values:
        //     CONTRACT_ACCEPTANCE (default)
        //     NEXT_LAUNCH
        //     PARAMETER_COMPLETION
        //
        timerType = CONTRACT_ACCEPTANCE

        // Whether the entire contract should fail or just the parameter when
        // the timer reaches zero.
        //
        // Type:      bool
        // Required:  No (defaulted)
        // Default:   true
        //
        failContract = true
    }
}