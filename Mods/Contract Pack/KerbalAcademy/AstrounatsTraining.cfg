// Modified 2024-04-20

CONTRACT_TYPE
{
    name = KerbalAcademy_PilotingTraining
    title = Kerbal Academy: Pilot Training
    group = KerbalAcademy
    description = It seems that a group of pilots is ready to improve their piloting skills. Take them to @targetVessel, along with 2 mentors to train them, then bring them back home.
    genericDescription = Put a pilot throught the training Program.
    synopsis = Complete the training course.
    completedMessage = Congratulations, we now have more experienced pilots on our team
    agent = Kerbal Academy
    notes = The parameters must be completed in order.
    minExpiry = 1
    maxExpiry = 7
    maxSimultaneous = 1
    cancellable = true
    declinable = true
    prestige = Significant
    targetBody = @/homeworld
    rewardScience = 0.0
    rewardReputation = 10
    rewardFunds = 0
    failureReputation = 0
    failureFunds = 0
    advanceFunds = -100000 - @/newLevel * 60000

    DATA
    {
        type = List<Kerbal>
        uniquenessCheck = CONTRACT_ACTIVE
        trainee_list = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.ExperienceLevel()<= 2 && m.Type() == Crew && m.RosterStatus() == Available).Random(4)
        title = Must have a group of Kerbals who qualify for the basic program.
    }

    DATA
    {
        type = int
        selectionIndex = Random(0, @validOTFs.Count() - 1)
        newLevel = Random(2, 4)
    }

    DATA
    {
        type = double
        expAward = @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
    }

    DATA
    {
        type = List<VesselIdentifier>
        requiredValue = false
        validOTFs = $KerbalAcademy_OrbitalTraingFacility.Where(vi => Vessel(vi).IsOrbiting() && Vessel(vi).EmptyCrewSpace() >= 6)
    }

    DATA
    {
        type = Vessel
        uniquenessCheck = CONTRACT_ACTIVE
        title = Must have an Orbital Training Facility with sufficient empty space
        targetVessel = @validOTFs.ElementAt(@selectionIndex)
    }

    BEHAVIOUR
    {
        name = AwardExperience
        type = AwardExperience
        onState = CONTRACT_COMPLETED
        kerbal = @/trainee
        experience = @/expAward
    }

    
    PARAMETER
    {	
        name = HasCrew
        type = HasCrew
        kerbal = @/trainee_list
    }

    PARAMETER
    {
        name = HasCrew
        type = HasCrew
        trait = Pilot
        title = Must have an experienced Pilot on board
        minExperience = 4
    }

    PARAMETER
    {
        name = HasCrew
        type = HasCrew
        trait = Commander
        title = Must have a commander to oversee the training
        minExperience = 2
    }

    PARAMETER
    {
        name = DockwithStation
        type = Docking
        vessel = @/targetVessel
        title = Dock with @/targetVessel
        completeInSequence = true
    }

    PARAMETER
    {
        name = Duration
        type = Duration
        duration = 10d
        preWaitText = Waiting for the Crew.
        waitingText = Crew at the station
        completionText = Mission accomplished! Bring the crew back home.
        completeInSequence = true
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal
        completeInSequence = true
        kerbal = @/trainee_list
    }
 
}

    
		
		

		